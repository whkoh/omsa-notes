#+AUTHOR: W
#+SETUPFILE: /Users/whkoh/git-repos/org-html-themes/org/theme-readtheorg-local-parent.setup
#+TITLE: ISYE 7406: Data Mining and Statistical Learning
* Week 3: Linear Regression (II)
M2T2
** James-Stein Estimator
*** It's a special case of linear regression
in LR model with
$$
Y_{n\times 1} = X_{n\times p} \beta_{p\times 1} + \epsilon_{n\times 1}, \text{s.t.} \epsilon \sim N(0, \sigma^2 I_{n\times n})
$$

Special case:
- $n=p$
- $X_{n\times p} = I_{p\times p}$

OLS yields the estimator of:

$$
\hat{\beta_{ols}} = (X^T X)^{-1} X^T Y =
(I^T_{p\times p} I_{p\times p})^{-1}
I^T_{p\times p} Y_{p\times 1} =
\bf{Y_{p\times 1}}
$$

When $\bf{p\ge 3}$, is it possible to do better than OLS?
*** Simultaneous estimation
- Problem of estimating $p$ # of parameters $\beta_i$'s simultaneously from $p$ observations ($Y_i$'s) under model:

  $$
  \bf{Y_i} \sim N(\beta_i, \sigma^2), \text{for }i = 1, 2, ..., p
  $$
- OLS (a.k.a. Maximum Likelihood Estimator, MLE) yields estimator:

  $$
  \hat{\beta_i} = Y_i \text{ for }i = 1, 2, ..., p
  $$

  Is it possible to do better here?
*** JS estimator
- Showed MLS/MLE estimator inadmissible for $p\ge 3$; dominated by JS estimator.

  $$
  \hat{\beta_i^{MLE}} = Y_i \text{ for }i = 1, 2, ..., p
  $$

  $$
  \hat{\beta_i^{(JS)}} = w Y_i + (1-w) \bar{Y} \text{ for }i = 1, 2, ..., p;
  $$

  $$
  w = 1 - \frac{(p-3)\sigma^2}{\sum^p_i(Y_i-\bar{Y})^2}
  $$
*** Baseball example
- Observe $Y_1, Y_2, ... Y_p$ batting averages (where $Y_i$ is the batting average for p=18 players), 45 AB
- "True" values $\mu_i$ are the averages over remainder of seasons, 370 AB
- Qn: how to predict season averages $\mu_i$ from early statistics $Y_i$?
- Estimators: MLE and JS
*** Comparing MLE and JS
- JS has lower predictive squared error than MLS (by 50%)
- JS estimator is **shrinkage** estimator.
  - Each MLE value shrunken towards **grand mean**
  - Data-based estimator, compromises between:
    - null hypothesis: all means the same
    - MLE assumption: no relationship between all $\mu_i$ values
  - Difficult to estimate $p\ge 3$ parameters simultaneously.
** Shrinkage Methods
- Estimation in linear regression: JS works in only specific cases ([[It's a special case of linear regression]]) when $p\ge 3$
- How to do better /generally/?
- Shrinkage methods (penalized, regularized)
  - Based on subtracting penalty from log-likelihood
  - Penalty is a function of /decay parameter/
  - Sort the variables to be included by size of /decay parameter/
  - This reduces to a nested case
  - After estimating /decay parameter/, variable or model selection is complete!
*** Setting up shrinkage method
- Needs: $Y_1, x_{11}, x_{12}, ..., x_{1,p}, \text{such that } i = 1,2,...,n$
- Assume all X & Y are standardized i.e.:
  $$
  \sum^n_{i=1}Y_i = 0,
  \sum^n_{i=i}x_{ij} = 0,
  \sum^n_{i=1}x^2_{ij} = 1
  $$
- If not standardized, do linear transformations:
  $$
  Y^{*}_i = Y_i - \bar{Y}
  $$

  $$
  x^{*}_{ij} = \frac{x_{ij}-\bar{x_j}}{\sqrt{\text{Var}_j}}
  $$
- With this assumption, $\beta_0 = 0$ in the model, i.e.
  $$
  Y_i = \bf{0 } \beta_1 x_{i1} + \beta_2 x_{i2} + ... + \beta_p x_{i,p} + \epsilon_i
  $$
- *The shrinkage method solves this optimization problem*

  $$
  \parallel
  Y_{n\times 1}-X_{n\times p}\beta_{p\times 1}
  \parallel^2 + \lambda\sum^p_{j=1}J(|\beta_j|)
  $$
  - penalty function :: $J(|\beta_j)$
  - decay or tuning parameter :: $\lambda \ge 0$
*** Alternative formulation
- Shrinkage method solves the *unconstrained* optimization problem
  $$
  \parallel
  Y_{n\times 1}-X_{n\times p}\beta_{p\times 1}
  \parallel^2 + \lambda\sum^p_{j=1}J(|\beta_j|)
  $$
- Alternative formulation solves a *constrained* optimization problem

  $$
  \min_{\beta} \parallel Y_{n\times 1} - X_{n\times p} \beta_{p\times 1} \parallel^2, \text{ subject to: }
  \sum^p_{j=1} J(|B_j|) \le s
  $$
  - tuning parameter :: $s \gt 0$

- The alternative formulation may greatly facilitate computation *at times*, e.g. in LASSO which is piecewise linear in $s$.
*** Bayesian interpretation
- For LR model ([[It's a special case of linear regression]]):
  - prior on \beta :: $\pi(\beta)$
  - independent prior on $\sigma^2$ :: $\pi(\sigma^2)$
  - posterior for $(\beta, sigma^2)$ :: proportional to
    $$
    \pi (\sigma^2)(\sigma^2)^{(n-1)/2}\exp\{-\frac{1}{2\sigma^2} \parallel Y_{n\times 1} - X_{n\times p} \beta_{p\times 1} \parallel^2 + \log \pi(\beta) \}
    $$
- *Posterior maximization method* yields shrinkage estimator

  $$
  \parallel Y_{n\times 1} - X_{n\times p} \beta_{p\times 1} \parallel^2 + \lambda \textbf{Pen}(\beta)
  $$
*** Choices of priors
i.e. choice of prior $\pi(\beta)$
- Normal prior :: yields *ridge regression* etsimator
- Laplace prior :: yields *LASSO* estimator
*** Ridge regression
*Normal prior* assumes $\beta_1 ... \beta_p$ are i.i.d. $N(0, \tau^2)$ with prior density
$$
\pi(\beta) = \prod^p_{i=1} \frac{1}{\sqrt{2\pi}\tau} \exp\left
(-\frac{1}{2\tau^2}\beta_i^2\right)
$$

Yields *ridge regression* estimator, which minimizes

$$
\parallel Y_{n\times 1} - X_{n\times p} \beta_{p\times 1} \parallel^2 + \lambda \sum^p_{j=1}(\beta_i)^2
$$
*** LASSO estimator
- *Laplace Prior*, assume  $\beta_1 ... \beta_p$ are i.i.d. double-exponential (Laplace) $\sim \text{Lapalce} (,\tau)$ with prior density
  $$
  \pi(\beta) = \prod^p_{i=1} \frac{1}{2\tau} \exp \left(- \frac{1}{\tau} |\beta_i| \right)
  $$
- Yields *LASSO* estimator that minimizes

  $$
  \parallel Y_{n\times 1} - X_{n\times p} \beta_{p\times 1} \parallel^2 + \lambda \sum^p_{j=1}|\beta_i|
  $$
** Ridge Regression
*** Ridge Regression Estimator
Assume these are observed: $Y_i, x_{i1}, ..., x_{ip}$, and all are standardized:
$$
\sum^n_{i=1} Y_i = 0,
\sum^n_{i=1} x_{ij} = 0,
\sum^n_{i=1} x^2_{ij} = 1
$$

In linear regression model without intercepts ([[It's a special case of linear regression]])

The ridge regression estimator is defined as:

$$
\hat{\beta^{\text{ridge}}} = \min_{\beta}
  \parallel Y_{n\times 1} - X_{n\times p} \beta_{p\times 1} \parallel^2 + \lambda \sum^p_{j=1}(\beta_i)^2
$$
*** Mathematical solution
- Explicit expression is thus
  $$
  \hat{\beta^{\text{ridge}}} = (X^T_{n\times p}X_{n\times p}+\lambda I_{p\times p})^{-1} X^T_{n\times p}Y_{n\times 1}
  $$
- Ridge regression *estimator or prediction*:
  $$
  \hat{Y}^{\text{ridge}} = X_{n\times p}  \hat{\beta^{\text{ridge}}}
  $$
- Requires *choosing* the tuning parameter $\lambda$, based on data, usually *by cross-validation*
*** Properties of Ridge Regression
- Ridge regression *most useful* when $X_{n\times p}$ is *non-singular*, but has *high collinearity*
  - i.e. $X^T_{n\times p} X_{n\times p}$ has eigenvalue close to 0
- $\hat{\beta^{\text{ridge}}}$ is biased, with bias $\rightarrow$ 0 as $\lambda \rightarrow 0$
- As $\lambda$ increases, $\hat{\beta^{\text{ridge}}}$ $\rightarrow 0$, though rarely = 0.
- Despite the bias, $\text{Var}(\hat{\beta^{\text{ridge}}})$ will usually be smaller than OLS
  - Therefore better prediction than OLS.
*** Computational issues
- How to compute ridge regression efficiently for any $\lambda$?
  $$
  \hat{\beta^{\text{ridge}}} = (X^T_{n\times p}X_{n\times p}+\lambda I_{p\times p})^{-1} X^T_{n\times p}Y_{n\times 1}
  $$
- It is highly non-trivial to compute the inverse of a large $p\times p$ matrix.
- *Singular Value Decomposition* (SVD) algorithm:
  - Write the matrix $X_{n\times p}$ in its SVD form
    $$
    X_{n\times p} = U_{n\times p} D_{p\times p} V^T_{p\times p}
    $$
    where: $U$ and $V are orthogonal; D = diag($d_1, ..., d_p$) is diagonal.
- Then: ridge regression estimator becomes the matrix product:
  $$
   \hat{\beta^{\text{ridge}}} = V_{p\times p} \text{diag} \left(\frac{d_1}{d^2_1 + \lambda}, ..., \frac{d_p}{d^2_p + \lambda} \right) U^T_{p\times n} Y_{n\times 1}
  $$
*** Example of SVD
- Find SVD of matrix
  $$
  X_{3 \times 2}
  = \begin{pmatrix}
  1 & 0 \\
  0 & 1 \\
  1 & 1 \\
  \end{pmatrix}
  = U_{n\times p} D_{p\times p} V^T_{p\times p}
  $$
- Steps (required: $p \leq n$):
  1. $U_{n\times p}$ is the normalized $p$ (largest) eigenvectors of $XX^T$
  2. $V_{p\times p}$ is the normalized eigenvectors of $X^T X$
  3. Matrix $D = \text{diag}(d_1, ..., d_p)$ with $d_j$ being the square root of $p$ (largest) eigenvalues of $XX^T$ or $X^T X$.
*** SVD Example (I): $XX^T$
For matrix [[Example of SVD]]:
we have
$$
XX^T = \begin{pmatrix}
1 & 0 & 1\\
0 & 1 & 1 \\
1 & 1 &2\end{pmatrix}
$$
- Characteristic polynomial is
  $-\lambda^3 + 4\lambda^2 - 3\lambda = -\lambda(\lambda-1)(\lambda-3)$
- The eigenvalues of $XX^T$ are $\lambda = 3, 1, 0$
- Corresponding eigenvectors are:
  $$
  u'_1 = \begin{pmatrix}
  1 \\
  1 \\
  2\end{pmatrix},
  u'_2 = \begin{pmatrix}
  1 \\
  -1 \\
  0\end{pmatrix},
  u'_3 = \begin{pmatrix}
  1 \\
  1 \\
  -1\end{pmatrix},
  $$
- Normalizing yields
  $$
  U_{3\times 2} = \begin{pmatrix}
  1\over{\sqrt{6}} & 1\over{\sqrt{2}} \\
  1\over{\sqrt{6}} & -1\over{\sqrt{2}} \\
  2\over{\sqrt{6}} & 0 \end{pmatrix},
  $$
- $d_1 = \sqrt{3}, d_2 = \sqrt{1} = 1$

*** SVD Example (II): $X^T X$
For matrix [[Example of SVD]]:
$$
X^T X
= \begin{pmatrix}
2 & 1 \\
1 & 2 \\
\end{pmatrix}
$$

- Characteristic polynomial is
  $\lambda^2 - 4\lambda + 3 = (\lambda -1)(\lambda -3)$
- Eigenvalues of $XX^T$ are: $\lambda = 3, 1$.
- Corresponding eigenvalues are:
  $$
  v'_1 = \begin{pmatrix}
  1 \\
  1\end{pmatrix},
  v'_2 = \begin{pmatrix}
  1 \\
  -1\end{pmatrix}
  $$
- Normalizing them yields:
  $$
  V_{2\times 2} = (v_1, v_2) =
  \begin{pmatrix}
  1\over\sqrt{2} & 1\over\sqrt{2} \\
  1\over\sqrt{2} & -1\over\sqrt{2}\end{pmatrix},
  $$
- $d_1 = \sqrt{3}, d_2 = \sqrt{1} = 1$
*** SVD verification
Might need to multiply some eigenvectors by -1.

\begin{equation}
X_{n\times p}
=
\begin{pmatrix}
1 & 0 \\
0 & 1 \\
1 & 1\end{pmatrix}
=
\begin{pmatrix}
1\over{\sqrt{6}} & 1\over{\sqrt{2}} \\
1\over{\sqrt{6}} & -1\over{\sqrt{2}} \\
2\over{\sqrt{6}} & 0\end{pmatrix}
\begin{pmatrix}
\sqrt{3} & 0 \\
0 & 1\end{pmatrix}
\begin{pmatrix}
1\over{\sqrt{2}} & 1\over{\sqrt{2}} \\
1\over{\sqrt{2}} & -1\over{\sqrt{2}}\end{pmatrix}

= U_{n\times p} D_{p\times p}V^T_{p\times p}
\end{equation}

\begin{equation}
= \lambda_1 u_1 v^T_1 + \lambda_2 u_2 v^T_2 =
0.5\begin{pmatrix}
1 & 1 \\
1 & 1 \\
2 & 2 \end{pmatrix} +
0.5\begin{pmatrix}
1 & -1 \\
-1 & 1 \\
0 & 0 \end{pmatrix}
\end{equation}
** LASSO (3.2.1)
*** LASSO estimator
- Assume these are observed: $Y_i, x_{i1}, ..., x_{ip}$, and all are standardized:
$$
\sum^n_{i=1} Y_i = 0,
\sum^n_{i=1} x_{ij} = 0,
\sum^n_{i=1} x^2_{ij} = 1
$$

In linear regression model without intercepts ([[It's a special case of linear regression]])

- LASSO :: Least Absolute Selection and Shrinkage Operator

- Definition ::

  $$
  \hat{\beta}^{\text{lasso}} = \min_\beta \parallel Y_{n\times 1} - X_{n\times p} \beta_{p\times 1} \parallel^2 + \lambda \sum^p_{j=1} |\beta_j|
  $$
- s.t. :: tuning parameter $\lambda > 0$
*** L2-norm vs L1-norm
[[./img/l2-l1-norm.png]]
- L1-norm: *sparse*, as boundary points of the L1-norm ball have lower dimensions (are in lower-dimensional space, $x_1 = 0, or x_2=0$)
*** Mathematical solution for LASSO estimator
- In the LASSO optimization, there is *no explicit* mathematical solution to $\hat{\beta}^{\text{lasso}}$
- Hence, need to use computational algorithms to get solution
- Explicit solution only available when $X^T X = I_{n\times n}$
  - In this case, LASSO estimator is:

    \begin{equation}
    \hat{\beta}^{\text{lasso}}_j =
    \begin{cases}
      \hat{\beta}_j^{ols} - \frac{\lambda}{2} & \text{if }\hat{\beta}_j^{ols}> \frac{\lambda}{2}\\
      0 & \text{if }|\hat{\beta}_j^{ols}| \leq \frac{\lambda}{2}\\
      \hat{\beta}_j^{ols} + \frac{\lambda}{2} & \text{if }\hat{\beta}_j^{ols} < -\frac{\lambda}{2}\\
    \end{cases}
    \end{equation}
- As: LASSO can be simplified to 1-dimensional optimization problem

  $$
  \min_{-\infty < x < \infty} (x - \hat{\beta}_j^{ols})^2 + \lambda |x|
  $$

since:

$$
\parallel Y - X\beta \parallel^2 = \parallel Y-X\hat{\beta}^{ols} \parallel^2 + (\beta - \hat{\beta}^{ols})^T X^T X(\beta - \hat{\beta}^{ols})
$$
*** Properties of LASSO
- *Good empirical performance when true model is sparse*
  - If so, outperforms AIC, BIC, stepwise, ridge
- Nice theoretical properties, i.e. high probability of the following under certain regularity conditions:
  - parameter recovery :: when $|\hat{\beta}_j^{lasso}-\hat{\beta}^{true}|^2$ is small
  - variable selection :: $\textbf{supp}(\hat{\beta}_j^{lasso}) = \textbf{supp}(\beta^{true})$
  - prediction error bound ::  $|X\hat{\beta}_j^{lasso} - X\beta^{true}|^2$ is small
*** LASSO weaknesses
- Not always consistent
- Tends to select over-parameterized model
- Does poorly when
  1. True model is *not sparse*
  2. When few X variables are highly correlated (LASSO picks 1 randomly)
  3. When the design $X$ matrix is too correlated (Ridge outperforms)
  4. When there are outliers in responses
*** Computation issues of LASSO
- Computation algorithms include:
  - Coordinate descent
  - Sub-gradient methods
  - Proximal gradient methods
- Would be ideal to compute entire solution path all at once, i.e. for all values for $\lambda$ simultaneously.
*** LASSO is piecewise linear
- The number of linear pieces in LASSO path is approximately $p$,
- The computational complexity of getting whole LASSO path is $O(np^2)$
  - i.e. same cost as computing least-squares fit
*** Standard error of LASSO
- How to estimate standard error of LASSO estimator i.e.
  $$
  \hat{\beta}^{\text{lasso}} = \min_\beta \parallel Y_{n\times 1} - X_{n\times p} \beta_{p\times 1} \parallel^2 + \lambda \sum^p_{j=1} |\beta_j|
  $$
- Answer: bootstrapping:
  1. Fix $\lambda$, generate a set of bootstrap samples
  2. Obtain corresponding $\hat{\beta}^{lasso}(\lambda)$
  3. Repeat for $L$ times and use them to estimate standard error
  4. If not determined/fixed, $\lambda$ can be estimated by cross-validation (e.g. 5 fold CV).
*** Variants of L1-norm
- Elastic net
  $$
  \hat{\beta}^{enet} = \min_\beta \parallel Y_{n\times 1} - X_{n \times p} \beta_{p \times 1} \parallel^2 + \lambda_1 \sum^p_{j=1} |\beta_j| + \lambda_2 \sum^p_j (\beta_j)^2
  $$
** Principal Components (3.2.2)
Assume these are observed: $Y_i, x_{i1}, ..., x_{ip}$ for $i=1,2,...,n$

Classical datasets: mostly small values of $p$; modern datasets: large $p$.

Essential to conduct *dimension reduction* to reduce the number of variables.
*** Dimension reduction
- 2 approaches:
  1. *variable selection*, i.e.: AIC, BIC, stepwise algorithm, LASSO, etc.
  2. *feature extraction*, i.e. identify which functions of data are most important. *no restricted* to using existing features/variables. Options are:
     - Principal component analysis
     - Partial least squares
*** Motivation of PCA
"Obtain more variance by transforming axes"
- Find *linear combinations* of $(x_1, ..., x_p)$ that express as much variability in $X$ as possible.
  - A linear combination with *high* variance will likely affect the response the most
  - If most variation of $X$ comes from the first few PCs then: enough to build models.
  - Other linear combination vary so little among different observations \rightarrow can be ignored
*** Find the PC's:  Population version
- *Optimization problem for PC's*: Given a $p$ -dim random vector
  $$
  \textbf{X} = (X_1, ..., X_p)^T, \text{ with covariance } \Sigma = \text{Cov}(X)
  $$
- PC1: Find $U_1 = \alpha_1 X_1 + ... + \alpha_p X_p$ that maximizes
  $$
  \textbf{Var}(\alpha_1 X_1 + ... + \alpha_p X_p) = \textbf{Var}(\alpha^T \textbf{X}) = \alpha^T \Sigma \alpha
  $$
  subject to:
  $$
  \alpha^2_1 + ... \alpha^2_p = 1, \text{i.e. } \alpha^T \alpha = 1, \text{where } \alpha = (\alpha_1, ..., \alpha_p)^T
  $$
- PC2: Find $U_2 = \alpha_1 X_1 + ... + \alpha_p X_p$ that maximizes \text{Var}(\alpha^T X) = \alpha^T \Sigma\alpha$, subject to *constraints*: - $\alpha^T \alpha = 1$
  - $\text{Cov}(U_1, U_2) = 0$
- Other (later) PC are defined analogously and uncorrelated with all previous PC's
*** Eigenvectors lead to PC's
- Theorem: Let covariance matrix $\bf{\Sigma} = \text{Cov}(\bf{X})$ have eignvectors $e_1, ..., e_p$ with corresponding eigenvalues $\lambda_1 \ge ... \ge \lambda_p \ge 0$. For $j=1,2,...,p$,
  - $j$ -th PC is
    $$
    U_j = e_j^T X = e_{j1}X_1 + ... + e_{jp}X_p
    $$
  - Variance of $j$ -th PC is
    $$
    \text{Var}(U_j) = \bf{e_j^T\Sigma e_j} = \lambda_j
    $$
*** Proof by Lagrange Multipliers
- The Lagrange multiplier is to maximize
  $$
  \phi(\alpha) = \alpha^T \Sigma\alpha - \lambda(\alpha^T \alpha -1)
  $$
- Setting derivatives qual = 0 gives:
  $$
  \frac{\partial \phi(\alpha)}{\partial\alpha} = 2\Sigma\alpha - 2\lambda\alpha = 0
  $$
- Thus: $\Sigma\alpha = \lambda\alpha$ \rightarrow
  \lambda is an eigenvalue of \Sigma and \alpha is the corresponding normalized eigenvector.
- For $U = \alpha^T X$, we have $\text{Var}(U) = \alpha^T \Sigma\alpha = \alpha^T (\lambda\alpha) = \lambda$.
- For PC1, we need to find largest eigenvector of \Sigma.
- Proofs of other Pcs are similar.
*** PCs in Empirical Version
In many real world applications, only given dataset
$Y_i, x_{i1}, ..., x_{ip}$ for $i=1,2,...,n$
How to find PC's?
- Key idea: estimate the unknown \Sigma by $\hat{\Sigma}_{p\times p}$ from the data, then find the PC's by the eigenvalues and eigenvectors of $\hat{\Sigma}_{p \times p}$
- *Empirical covariance matrix* $\hat{\Sigma}_{p\times p}$ is widely used when $p<n$
  - Here, the $(r,s)$ entry of $\hat{\Sigma}_{p\times p}$ is defined as:
    $$
    \hat{\Sigma}_{rs} = \frac{1}{n} \sum^n_i(x_{ir}-\bar{x}_r)(x_{is}-\bar{x}_s)
    $$
  - Research tbd on how to estimate $\Sigma$ effectively when $p>>n$.
*** Principal component regression
- Original data: $Y_i, x_{i1}, ..., x_{ip}$ for $i=1,2,...,n$
- After we extract all PC's, raw data can be written as new format
  $(Y_i, u_{i1}, ..., u_{ip})$ for $i=1,2,...,n$
- Principal component regression: linear regression by using only first $k$ PC's:
  $$
  Y_i = \beta_0 + \beta_1 u_{i1} + ... + \beta_k u_{ik} + \epsilon_i
  $$
- Choosing $k$: done by *cross-validation*.
** Partial least squares (3.2.3)
*** Dimension reduction
There are 2 kinds of dimension reduction algorithms:
1. Unsupervised dimension reduction, e.g. PCA. Criticisms: it explains $X$ but no reason to be sure that the result also explains a response $Y$.
2. Supervised dimension reduction, i.e. conduct reduction on $X$ by using the extra information in $Y$.
   - Reasonable to believe that supervised techniques will *do better*
   - *Partial least squares* is one such technique
*** Partial least squares
Collection of techniques with 2 common properties:
1. *Maximizes correlation between $Y \& X$*, rather than maximizing variance of $Y$ only.
2. Can be interpreted as finding the underlying factors of $X$ that are also underlying factors of $Y$.
*** 2 versions of PLS
1. Simple PLS algorithm: variant of PC's but using *correlation* instead of variance
2. PLS model: identify common factors of $X \& Y$
*** Simple PLS algorithm
- Given $Y_i, x_{i1}, ..., x_{ip}$ for $i=1,2,...,n$
- Let $x_i = (x_{i1}, ..., x_{ip})^T$.
- First PLS, $V_1 = \alpha_1 X_1 + ... + \alpha_p X_p$ is defined as finding $\alpha = (\alpha_1, ..., \alpha_p)^T$ that maximizes *covariance*
  $$
  \hat{\textbf{CoV}}(Y, V_1) = \frac{1}{n} \sum^n_i (Y_i-\bar{Y})(v_i-\bar{v}),
  $$
  when
  $v_i = \alpha_1 x_{i1} + ... + \alpha_p x_{ip}$ for $i=1,2,...n$ subject to $\alpha^T \alpha = 1$
- Later PLSs are defined analogously to maximize the covariance and are *assumed to be uncorrelated* with all previous PLSs.
- *Solution*: the $\alpha$'s are the eigenvectors of the $p \times p$ matrix $X^T Y Y^T X$ when the data matrices $X \& Y$ have column mean zero.
*** The PLS model
- Data: $Y_i, x_{i1}, ..., x_{ip}$ for $i=1,2,...,n$
- Assume data have mean 0.
- Write data matrix as $(Y_{n \times  q}, X_{n \times  p})$
- Goal: find $\ell$ linear combinations from $X \& Y$ to use as new dimensions.
- The PLS model: noniterative iterative partial least squares (NIPALS):

  $$
  X_{n \times  p} = T_{n \times \ell} P_{\ell \times  p} + E,
  Y_{n \times  q} = U_{n \times  \ell} Q_{\ell \times  q} + F
  $$
  where:
  - $T_{n \times \ell}$ and $U_{n \times \ell}$ represent $\ell$ factors
  - $P_{\ell \times  p}$ and $Q_{\ell \times q}$ are loadings.
*** Key idea in The PLS Model
- How to estimate the \ell factors, or the $T_{n \times \ell}$ and $U_{n \times \ell}$ matrices?
- Answer:
  - Write the first column of  $T_{n \times \ell}$ and $U_{n \times \ell}$  as $t=\bf{X} r$ and $u=\bf{Y} s$ for two unit vectors, $\parallel r \parallel = \parallel s \parallel = 1$
  - Find $r$ and $s$ that maximizes the *covariance-squared*: $\textbf{Cov}^2(Xr, Ys)$
*** PLS for linear regression
- Original data: $Y_i, x_{i1}, ..., x_{ip}$ for $i=1,2,...,n$
- After extracting all PLS's, raw data can be written as new formats $(Y_i, v_{i1}, ..., v_{ip})$ for $i=1,2,...,n$
- Partial least squares regression: linear regression using only *first k* PLSs:
  $$
  Y_i = \beta_0 + \beta_1 v_[i1] + ... + \beta_k v_{ik} + \epsilon_i
  $$
- Choosing $k$: by *cross-validation*
*** Canonical correlation analysis (CCA)
- CCA: find the unit vectors $(r, s)$ that maximizes the *correlation coefficient*
  $$
  \text{Corr}(Xr, Ys) = \frac{r^T \Sigma_{XY}s}{\sqrt{r^T \Sigma_{XX}r}\sqrt{s^T \Sigma_{YY}s}}
  $$
- Solution: in the population(?) version with $(X_1, ..., X_p)$ and $(Y_1, ..., Y_q)$, consider $r^T X = r_1 X_1 + ... + r_p X_p$ and $s^T Y = s_1 Y_1 + ... + s_q Y_q$, the optimal $r, s$ values are the respective eigenvectors of

  $$
  \Sigma^{-1}_{XX} \Sigma^{-1}_{YY} \Sigma_{YX} \text{ and }
  \Sigma^{-1}_{YY} \Sigma^{-1}_{XX} \Sigma_{XY}
  $$
* Week 4: Linear Classification
** Overview of Linear Discriminant Analysis (4.1.1)
Supervised learning recap
- Data: $Y_i, x_{i1}, ..., x_{ip}$ for $i=1,2,...,n$
- Objective: predict $Y$ for given new input $x_{\text{new}} = (x_1, ..., x_p)$
- Types of tasks:
  1. Regression: why response $Y$ is continuous
  2. Regression: When response $Y is binary, or discrete values representing classes
*** Classification problem
- For $Y_i, x_{i1}, ..., x_{ip}$ for $i=1,2,...,n$ where $Y_i \in {1, 2, ...K}$ is the class label
- Objective: find a decision function to *discriminate* among data form the $K$ different classes.
  - Learn a decision rule $h(x) \in {1, 2, ...k}$ used to separate the $K$ classes
  - Predict the class label for new input $x_{\text{new}}$
- Example: classifying patients in hospital ER into classes (low, med, high risk) by age, gender, weight, BP, insurance, etc.
  - Assign treatment priority to high-risk patients?
*** Popular classification methods and R packages
- Discriminant analysis :: ?
a- Tree-based classifiers :: ~rpart~
- Boosting :: ~gbm~
- Random forest :: ~randomForest~
- Neural networks :: ~nnet~
- svm :: ~e1071~
*** Discriminant analysis
- A multi-classifier is associated with a $K$ - dim vector
  $$
  d(x) = (d_1 (x), ..., d_K (x))
  $$
  where $d_k (x)$ represents the strength of evidence that $x$ is in class $k$.
- For given new input $x_{\text{new}}$, predict the class label

  $$
  \hat{k} = \text{argmax}_{k=1, 2, ..., K} d_k (x_\text{new})
  $$
- Discriminant functions $d_k (x)$ are *linear* functions of $x = (x_1, ..., x_p)$
*** Example for 3-class problem
[[./img/3-class.png]]
Predict $Y \in {1,2,3}$ based on $(X_1, X_2)$:
- Class 1 if $d_1 > \max(d_2, d_3)$
- Class 2 if $d_2 > \max(d_1, d_3)$
- Class 3 if $d_3 > \max(d_1, d_2)$

  In this example, boundaries ${(x_1, x_2): d_i (x_1, x_2) = d_j(x_1, x_2)}$ are linear.
*** Discriminant functions
How to construct discriminant functions $d_k (x)$ 's?
3 approaches are available:
1. Distance-based discriminant analysis, e.g. $d_k$ is the distance between the sample mean of the $k$ -th class and the new input $x$.
2. Bayes Rules
3. Probability-based rule, i.e. Logistic Regression
*** Multi-class vs. Binary
If the number $K$ of classes is not too large, can simplify the multi-class problems into *series of* binary problems via two approaches:
- one vs rest :: training binary classifiers with \partial_k(X) separating class $k$ from the rest. It's easy to implement but poor performance if no dominating class. Binary problems are unbalanced.
- pairwise comparison approach :: train $K(K-1)/2$ binary classifiers. The final class prediction is decided by a voting scheme among all classifiers.
** Linear discrimination analysis continued (4.1.2)
See: [[Discriminant analysis]].

LDA was first developed as distance-based classification (Fisher, 1936). Alternate interpretation: Bayes.
*** Bayes classifier
- Under $0-1$ loss, Bayes classifier is
  $$
  \text{argmax}_k  (P(Y=k | x))
  = \text{argmax}_k (\pi_k f_k (x))
  = \text{argmax}_k (\log(\pi_k) + \log(f_k (x)))
  $$
  where:
  - $\pi_k$ :: a prior
  - $f_k$ ::  the density function of the $k$ -th class
*** Normality asumption
LDA is the Bayes Rule under assumption that *densities* $f_k$ are *multivariate normal* with the *common covariance*, i.e. $N(\mu_k, \Sigma)$.

Mathematically, LDA assumes:
$$
f_k(x) = \frac{1}{\sqrt{2\pi}|\text{det}(\Sigma)} \exp\left({-\frac{1}{2} (x-\mu_k)^T \Sigma^{-1}(x-\mu_k)}\right)
$$
for $k=1,2,...,K$
*** Bayes classifier for normal distribution
- If the $f_k$ are normal with common variance, i.e. $N(\mu_k, \Sigma)$, then the Bayes classification rule is
  $$
  \text{argmax}_k \left(
  -\frac{1}{2} \text{logdet}(\Sigma) - \frac{1}{2}(x-\mu_k)^T\Sigma^{-1}(x-\mu_k) + \log \pi_k
  \right)
  $$

  $$
  = \text{argmax}_k \left(
  x^T\Sigma^{-1}\mu_k - \frac{1}{2}\mu^T_k \Sigma^{-1} \mu_k + \log \pi_k
  \right)
  $$

  since the common variance term drops out.

- Leads to linear discrimination function:
  $$
  d_k(x) = x^T \Sigma^{-1} \mu_k - \frac{1}{2}\mu_k^T \Sigma^{-1} \mu_k + \log \pi_k
  $$
*** LDA in practice
- Data: for $Y_i, x_{i1}, ..., x_{ip}$ for $i=1,2,...,n$ where $Y_i \in {1, 2, ...K}$ is the class label
- LDA uses the  discrimination function:
  $$
  d_k(x) = x^T \Sigma^{-1} \mu_k - \frac{1}{2}\mu_k^T \Sigma^{-1} \mu_k + \log \pi_k
  $$
- In practice, parameters are estimated from training data as follows:
  - $\hat{\pi_k}$ :: $\frac{n_k}{n}$
  - $\hat{\mu_k}$ :: $\frac{1}{n_k} \sum_{y_i=k} x_i$ where $n_k$ is the no. of observations in class $k$
  - $\hat{\Sigma}$ :: $\frac{1}{\sum^K_{k=1}(n_k -1)} \sum^K_{k=1} \sum_{y_i=k}(x_i - \hat{\mu}_k)(x_i-\hat{\mu}_k)^T$ which is the within-class sample variance
*** LDA for K=2 classes
- Classifies into class 2 if and only if
  \begin{equation}
  x_T \hat{\Sigma}^{-1} - \frac{1}{2} \hat{\mu}^T_2 \hat{\Sigma}^{-1} \hat{\mu}_2 + \log \hat{\pi}_2 >
  x^T \Sigma^{-1}\hat{\mu}_1 - \frac{1}{2} \hat{\mu}_1^T \hat{\Sigma}^{-1} \hat{\Sigma}_1 + \log \hat{\pi}_1
  \end{equation}
  or
  \begin{equation}
  x^T \Sigma^{-1}(\hat{\mu}_2- \hat{\mu}_1) >
   \frac{1}{2} \hat{\mu}_2^T \hat{\Sigma}^{-1} \hat{\mu}_2 -
   \frac{1}{2}\hat{\mu}_1^T \Sigma^{-1} \hat{\mu}_1 + \log{\frac{n_1}{n}} - \log{\frac{n_2}{n}}
 \end{equation}

 - let $w=\Sigma^{-1} (\hat{\mu}_2 - \hat{\mu}_1)$, the LHS = $x^T w = w \cdot x = w_1 x_1 + ... + w_p x_p$, is the projection of the $p$ -th dimensional vector $x$ to a real-valued number
*** Fisher's distance-based approach
- for $k=2$ classes:
  - projects the p-dimensional vector $\textbf{x}$ to a real-valued number
    $$
    L = \textbf{w} \cdot \textbf{x} = x^T w = w_1x_1 + ... + w_p x_p
    $$
  - Find the optimal direction $\textbf{w}$ that best separates two classes on the projection line, using *training data*
  - Assign new point $x$ to class 2 if and only if:
    $$
    \textbf{w} \cdot \textbf{x} > \textbf{w} \cdot \frac{\hat{\mu}_1 + \hat{\mu}_2}{2}
    $$
  - Equivalently: assign $x$ to class 2 if
    \begin{equation}
    x^T \Sigma^{-1}(\hat{\mu}_2- \hat{\mu}_1) > \frac{1}{2} \hat{\mu}_2^T \hat{\Sigma}^{-1} \hat{\mu}_2 - \frac{1}{2}\hat{\mu}_1^T \Sigma^{-1} \hat{\mu}_1
    \end{equation}

    which is the same as Bayes-based LDA when the classes have equal numbers of observations.
** Quadratic Discrimination Analysis classifier (4.1.3)
See [[Discriminant analysis]].
How to choose suitable discriminant functions $d_k(x)$?
*** Bayes classifier
- The discriminant functions $d_k(x)$ are based on *posterior* distributions
- The Bayes classifier is defined as:
  \begin{equation}
  \text{argmax}_k (P(Y=k|x))
  = \text{argmax}_k (\pi_k f_k (x))
  = \text{argmax}_k (\log \pi_k + \log f_k (x))
  \end{equation}
  where:
  - $\pi_k$ is a *prior*
  - $f_k$ is the density function of the $k$ th class
  Question: how to model the density functions $f_k$? *Normal distribution!*
*** Normal distribution
Univariate normal distribution $N(\mu, \sigma^2)$
- Probability density function is given by:
  $$
  p(x) = \frac{1}{\sqrt{2\pi}\sigma} \exp \left( -\frac{1}{2\sigma^2} (x-\mu)^2\right)
  $$
- parameter estimation of $(\mu, \sigma^2)$ from training data:
  - sample mean, $\hat{\mu}$ :: $\bar{x} = \frac{1}{n} \sum^n_{i=1}x_i$
  - sample variance, $\hat{\sigma}^2$ :: $\frac{1}{n-1} \sum^n_{i=1} (x_i - \bar{x})^2$
- properties: the components of $X$ are independent iif $\Sigma$ is diagonal!
*** Normal model for $f_k$
- See [[Discriminant analysis]]
- Bayes classifier:
  $\text{argmax}_k (\log \pi_k + \log f_k (x))$ where $\pi_k$ is a prior and $f_k$ is the pdf of the $k$ th class.
- Model: assume pdfs $f_k(x) = f_k(x_1, ..., x_p) \sim N(\mu_k, \Sigma_k)$
- Question: how to estimate $(\mu_k, \Sigma_k)$?
*** Three approaches to estimate
Different assumptions:
- Linear discriminant analysis :: When $\Sigma_k \equiv \Sigma$ (common variance), estimated by within-sample covariance
- Quadratic discriminant analysis :: when $\Sigma_k$ is estimated by the sample covariance of the $k$ -th class
- Naive Bayes :: when each component of $\textbf{X}$ is independent, i.e. when $\Sigma_k \equiv \Sigma = \text{diag}(\sigma^2_{k1}, ..., \sigma^2_{kp})$
*** QDA classifier
- Assumes that $f_k$ are normal $N(\mu_k, \Sigma_k)$
- Assigns data $x$ to the class:
  $$
  \text{argmax}_k \left(
  -\frac{1}{2} \log \text{det}(\Sigma_k) -
  \frac{1}{2}(x-\mu_k)^T \Sigma^{-1}_k (x-\mu_k) + \log \pi_k
  \right)
  $$
- In practice, estimated from training data:
  - $\hat{\pi}_k$ :: $\frac{n_k}{n}$
  - $\hat{\mu}_k$ :: $\frac{1}{n_k} \sum_{y_i = k} x_i$ where n_k is the no. of observations in class $k$
  - $\hat{\Sigma}_k$ :: $\frac{1}{n_k-1} \sum_{y_i=k} (x_i-\hat{\mu}_k)(x_i - \hat{\mu}_k)^T$ which is the sample covariance of class $k$
*** Naive Bayes classifier
- Assumes that $\Sigma_k \equiv \Sigma = \text{diag}(\sigma^2_{k1}, ..., \sigma^2_{kp})$, or equivalently:
  $$
  f_k(x) = f_k (x_1, ..., x_p) = \prod^p_{j=1} f_{kj}(x_j),
  f_{kj} \sim N(\mu_{kj}, \sigma^2_{kj})
  $$
- Assigns $x$ to class $\text{argmax}_k (\pi_k \prod^p_{j=1}) f_{k,j}(x_j)$
- In practice, parameters $(\mu_{kj}, \sigma^2_{kj})$ estimated from the $j$ -th component of $X$ variables for $k$ -th class in training data:
  - $\hat{\pi}$ :: $\frac{n_k}{n}$
  - $\hat{\mu}_{kj}$ :: $\frac{1}{n_k} \sum_{y_i = k} x_{ij}$
  - $\hat{\sigma^2_{kj}}$ :: $\frac{1}{n_k-1} \sum_{y_i = k} (x_{ij}-\bar{x}_j)^2$
*** General Naive Bayes classifier
- *Ignore* any dependence between explanatory variables and assume that $X_j$'s are independent.
- Thus, corresponding classifier is
  $$
  \text{argmax}_k (\pi_k \prod^p_{j=1}f_{k,j}(x_j))
  $$
- In practice, marginal densities $f_{k,j} (\cdot)$ are usually assumed to be parameterized by some parameters, which must be estimated, e.g.:
  - Gaussian Naive Bayes
  - Bernoulli Naive Bayes
  - Multinomial Naive Bayes
  - Poisson Naive Bayes
** Logistic Regression: Estimation (4.2.1)
*** Classification methods
- With data $(Y_i, X_i)$ for $i=1,...,n$, where $Y_i$ is the class label
- Two approaches to develop classifiers:
  1. Model conditional densities $f_k = p(\textbf{X}|Y=k)$ at the given $k$ -th class
     - *Normality assumption on X*: LDA, QDA, Naive Bayes
  2. Model the conditional density $P(Y=k|\textbf{X})$ directly:
     - *Bernoulli assumption on Y*: Logistic Regression
*** Binary logistic regression
- With data: $(Y_i, x_{i1}, ..., x_{i,p-1})$ for $i=1,...,n$, where $Y_i \in {0,1}$ is the class label
- Logistic regression defined as 2 components:
  1. Model the response $\textbf{Y}$ as Bernoulli distribution:
     $$
     P(Y_i=1) = \pi_i \\ P(Y_i = 0) = 1-\pi_i
     $$
  2. Link the model parameters to the independent $\textbf{X}$ variables:
     $$
     \log \frac{\pi_i}{1-\pi_i} = \beta_0 + \beta_1 x_{i1} + ... + \beta_{p-1} x_{i,p-1}
     $$
     with $p$ = number of $\beta$ coefficients
*** Conditional probability
- Under logistic regression, at given $X=(x_1, ..., x_{p-1})$, the conditional probabilities are
  $$
  P(Y=1|X) = \pi = \frac{e^{\beta_0 + \beta_1 x_1 + ... + \beta_{p-1} x_{p-1}}}{1+ e^{\beta_0 + \beta_1 x_1 + ... + \beta_{p-1} x_{p-1}}} \\
  P(Y=0|X) = 1-\pi = \frac{1}{1+ e^{\beta_0 + \beta_1 x_1 + ... + \beta_{p-1} x_{p-1}}}
  $$
*** Statistical inference
Statistical questions in logistic regression:
- How to estimate the $\beta$ parameters in the logistic regression model from training data?
- How to conduct hypothesis testing or get confidence interval?
- How to use logistic regression model for prediction?
*** Maximum likelihood estimation
- The likelihood function of the logistic regression model is
  $$
  L(\beta) = \prod^n_{i=1} \pi_i^{y_i} (1-\pi_i)^{1-y_i} \\
  = ... \\
  = \prod^n_{i=1} \frac{e^{y_i(\beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + ... + \beta_{p-1} x_{i,p-1})}}{1+e^{\beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + ... + \beta_{p-1} x_{i,p-1}}}
  $$
- MLE $\hat{\beta}$ of the $\beta_i$ 's can be found by maximizing $L(\beta)$.
*** Asymptotic properties of MLE
- MLE $\hat{\beta}$ has nice asymptotic properties:
  $$
  \hat{\beta} \sim N(\beta, I^{-1}_{p\times p})
  $$
  where $I_{p\times p}$ is the observed Fisher Information Matrix defined by the negative values of the *2nd order derivatives* of the log-likelihood function ($\log L(\beta)$) at $\hat{\beta}$, i.e.

  $$
  I_{p\times p} = (-\frac{\partial^2\log L}{\partial \beta_i \partial \beta_j})|_{\hat{\beta}}
  $$
*** Other link function
- With data: $(Y_i, x_{i1}, ..., x_{i,p-1})$ for $i=1,...,n$, where $Y_i \in {0,1}$ is the class label
- Generalized linear model: two steps
  1. $$
     P(Y_i = 1) = \pi_i, P(Y_i = 0) = 1-\pi_i
     $$
  2. $$
     g(\pi_i) = \beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + ... + \beta_{p-1} x_{i, p-1}
     $$
     where $g(\cdot): (0,1) \rightarrow (-\infty, infty)$ is called a *link function*
- Other link functions available:
  1. Normal/probit link: $g=\phi^{-1}$ where $\phi(t) = P(N(0,1) \le t)$ is the c.d.f. of the normal distribution
*** Logistic or LDA?
Comparison:
- Similar: both have discriminant functions that are linear combinations of independent $X$ variables
- Difference: how to estimate linear coefficients
  - LDA: assume $X|Y = k$ is *Gaussian*
  - Logistic regression: *ignore* $\textbf{P(X)}$
- Generally, *logistic regression* is thought to be *safer & more robust* than LDA
  - Often, same results
** Optimizations in Logistic Regression (4.2.2)
*** Logistic regression recap
- With data: $(Y_i, x_{i1}, ..., x_{i,p-1})$ for $i=1,...,n$, where $Y_i \in {0,1}$ is the class label
- Logistic regression model defined as 2 components
  $$
  P(Y_i=1) = \pi_i \\
  P(Y_i = 0) = 1-\pi_i \\
  \log \frac{\pi_i}{1-\pi_i} = \beta_0 + \beta_1 x_{i1} + ... + \beta_{p-1} x_{i,p-1}
  $$
- *Question*: how to estimate the $\beta_i$ in the model?
*** MLE in logistic regression
As seen previously, MLE can be found by maximizing likelihood function:
$$
L(\beta) =
\prod^n_{i=1} \frac{e^{y_i(\beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + ... + \beta_{p-1} x_{i,p-1})}}{1+e^{\beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + ... + \beta_{p-1} x_{i,p-1}}}
$$
- Challenges:
  - *No explicit* solutions to MLE $\hat{\beta}$.
  - Need to rely on numerical solutions to apply efficient optimization algorithm to find MLE $\hat{\beta}$.
*** Optimization problem
In statistics and machine learning, we often face optimization problem, e.g.:
$$
\hat{\theta} =
\text{argmin}_{\theta \in \Theta \subset \Re^p}
$$
Often $h(\theta)$ is smooth and we want to solve the first derivative $h'(\theta) = 0$.
- *Iterative method*: one widely used optimization algorithm:
  1. Find sequence of $\theta^{(i)}$ values until convergence to $\hat{\theta}$.
  2. When converged, we have $h'(\hat{\theta}) = 0$.
*** Optimization algorithms
Two basic iterative algorithms to solve $\hat{\theta} = \text{argmin}_\theta h(\theta)$:
1. *Gradient descent*, widely used in machine learning
   $$
   \theta_{\text{new}} = \theta_{\text{old}} - \lambda h'(\theta_{\text{old}})
   $$
   where $\lambda$ is the learning rate
2. *Newton-Raphson Method*, very popular in statistics
   $$
   \theta_{\text{new}} = \theta_{\text{old}} - [h''(\theta_{\text{old}})]^{-1} h'(\theta_{\text{old}})
   $$
*** Newton-Raphson Method
[[./img/n-r-method.png]]
Mathematically:
1. When starting at $\theta_{\text{old}}$ and want to update to $\theta_{\text{new}} = \theta_{\text{old}} + \epsilon$, *how to choose $\epsilon$* so that $h'(\theta_{\text{new}})=0$?
2. Answer: Taylor series expansion of $h(\theta)$ on $\theta_{\text{old}}$!
*** Taylor Expansion consideration
- When $\theta$ is 1-dim, by *Taylor series expansion*,
  $$
  h'(\theta_{\text{old}} + \epsilon) \approx h'(\theta_{\text{old}}) + \epsilon h''(\theta_{\text{old}})
  $$
- Setting to 0 yields:
  $$
  \epsilon \approx - \frac{h'(\theta_{\text{old}})}{h''(\theta_{\text{old}})}
  $$
- The idea is identical for high-dim \theta. This leads to Newton-Raphson method:
  $$
  \theta_{\text{new}} = \theta_{\text{old}} - [h''(\theta_{\text{old}})]^{-1} h'(\theta_{\text{old}})
  $$
  where updates are done till $\theta$ converges.
*** Newton-Raphson Method in Statistics
Why is this method popular in statistics?
- When converged, Newton-Raphson Method provides 2 values:
  $$
  \hat{\theta} \text{ and} \\
  \hat{V} = -[h''(\hat{\theta})]^{-1}
  $$
- When $h(\theta)$ is the log-likelihood function in statistics, the maximum likelihood estimator is $\hat{\theta}$
  - By the asymptotic theory of MLE, $\frac{\hat{\theta}-\theta}{\sqrt{\hat{V}}} \sim N(0,1)$ and thus the 95% CI on $\theta$ is $\hat{\theta} \pm 1.96 \sqrt{\hat{V}}$
*** MLE of logistic regression
- In logistic regression, the log-likelihood function (in vector notation) is:
  $$
  \log L(\beta) = \sum^n_{i=1} [y_i \beta^T x_i - \log(1+e^{\beta^T x_i})]
  $$
- First order derivative
  $$
  \frac{\partial \log L(\beta)}{\partial\beta} = \sum^n_{i=1} [y_i x_i - \frac{e^{\beta^T x_i}}{1+e^{\beta^T x_i}}x_i] \\
  = \sum^n_{i=1} (y_i - \pi_i)x_i
  $$
- Second order derivatives
  $$
  \frac{\partial^2 \log L(\beta)}{\partial \beta \partial\beta^T} \\
  = -\sum^n_{i=1} x_i \frac{e^{\beta^T x_i}(1+e^{\beta^T x_i})-e^{\beta^T x_i}\cdot e^{\beta^T x_i}}{(1-e^{\beta^T x_i})^2}x^T_i \\
  = -\sum^n_{i=1} x_i \pi_i (1-\pi_i)x_i^T
  $$
- Let:
  \begin{equation}
  \pi =
  \begin{pmatrix}
  \pi_1 \\
  ... \\
  \pi_n
  \end{pmatrix}
  ;
  W =
  \begin{pmatrix}
  \pi_1 (1-\pi_1) & & \\
   & ... & \\
   & & \pi_n (1-\pi_n)
   \end{pmatrix}
   \end{equation}
- We have $h'(\beta) = X^T (Y-\pi)$ and $h''(\beta) = -X^T WX$
- Applying Newton-Raphson Method to the MLE of logistic regression:
  $$
  \beta_{\text{new}} = \beta_{\text{old}} - [h''(\beta_{\text{old}})]^{-1} h'\beta_{\text{old}} \\
  = \beta_{\text{old}} + (X^T WX)^{-1} X^T(Y-\pi) \\
  = (X^T WX)^{-1} X^T W [X\beta_{\text{old}} + W^{-1}(Y-\pi)] \\
  = (X^T WX)^{-1} X^T WZ
  $$
  where $Z = X\beta_{\text{old}} + W^{-1}(Y-\pi)$
- This is *weighted least squares*.
*** Algorithm for MLE in logistic regression
- Initialize $\beta_{\text{init}}=0$
- Given $\beta_{\text{old}}$,
  1. Compute 3 new variables:
     $$
     \hat{\pi_i} = \frac{e^{\beta^T_{\text{old}}}x_i}{1+e^{\beta^T_{\text{old}}}x_i} \\
     w_i = \hat{\pi}_i (1-\hat{\pi}_i) \\
     Z_i = \beta^T_{\text{old}} x_i + \frac{Y_i - \hat{\pi}_i}{\hat{\pi}_i (1-\hat{\pi}_i)}
     $$
  2. Conduct weighted least squares:
     $$
     \beta_{\text{new}} \leftarrow \text{argmin}_{\beta} [(Z_X\beta)^T W(Z-X\beta)]
     $$
- Repeat the 2nd step until convergence.
** Simplest logistic regression (4.2.3)
- With data: $(Y_i, x_{i1}, ..., x_{i,p-1})$ for $i=1,...,n$, where $Y_i \in {0,1}$ is the class label
- Logistic regression is defined as two components:
  $$
  P(Y_i=1) = \pi_i \\
  P(Y_i = 0) = 1-\pi_i \\
  \log \frac{\pi_i}{1-\pi_i} = \beta_0 + \beta_1 x_{i1} + ... + \beta_{p-1} x_{i,p-1}
  $$
- Simplest logistic regression model is when $p = 2$ and $x_{i1}\in{0,1}$
  - Explicit solution of MLE exists
  - Helps to better understand general theory
*** Data in Simplest Logistic Regression
[[./img/data-slr.png]]
Can also be summarised as 2x2 table, typical in biostatistics, i.e.:

$n=a+b+c+d$
|         | Y_i = 1 | Y_i=0 | Sum |
|---------+---------+-------+-----|
| x_i = 1 | a       | b     | a+b |
| x_i = 0 | c       | d     | c+d |
*** Is X and Y associated?
- Example context:
  - X refers to exposure, e.g. does subject smoke?
  - Y refers to disease, e.g. does subject have lung cancer
- Based on the table, is X associated with Y?
- Equivalent to hypothesis test:
  $$
  H_0: \beta_1 = 0 \text{ vs. } H_1: \beta_1 \neq 0
  $$
- If we can find 95% CI of $\beta_1$, e.g.
  $$
  \hat{\beta_1} \pm 1.96 \sqrt{\hat{\text{Var}}(\hat{\beta_1})}
  $$
- Then we reject $H_0$ if and only if 0 is *outside* the CI.
*** The likelihood function
is:
$$
L(\beta) = \prod^n_{i=1} \frac{e^{Y_i}(\beta_0+\beta_1 x_i)}{1+e^{\beta_0 + \beta_1 x_i}} \\
= \frac{e^{\beta_0(a+c) + \beta_1 a}}{(1+e^{\beta_0+\beta_1})^{a+b}(1+e^{\beta_0})^{c+d}}
$$
*** The MLE estimator of $\beta_i$ 's
- The log-likelihood function
  $$
  \log L = (a+c) \beta_0 + \alpha \beta_1 - (c+d)\log(1+e^{\beta_0}) - (a+b) \log(1+e^{\beta_0 + \beta_1})
  $$
- Setting derivatives to 0 yields:
  $$
  \frac{\partial \log L}{\partial \beta_0}
  = (a+c) - (c+d) \frac{e^{\beta_0}}{1+e^{\beta_0}} - (a+b) \frac{e^{\beta_0 + \beta_1}}{1+ e^{\beta_0 + \beta_1}} = 0 \\
  \frac{\partial \log L}{\partial \beta_1} = a - (a+b) \frac{e^{\beta_0 + \beta_1}}{1+ e^{\beta_0+\beta_1}} = 0
  $$
- Solving these equations simultaneously yields MLE:
  $$
  \hat{\beta_0} = \log(\frac{c}{d})
  \text{ and }
  \hat{\beta_1} = \log(\frac{ad}{bc})
  $$
*** Fisher Information Matrix
- For $\theta$ = (\beta_0, \beta_1)^T, the 2nd order derivatives yield the Fisher Information Matrix:
  \begin{equation}
  \frac{\partial^2 \log L(\theta)}{\partial\theta\partial\theta^T} =
  \begin{pmatrix}
  -\frac{(a+b)e^{\beta_0+\beta_1}}{(1+e^{\beta_0+\beta_1})^2}-\frac{(c+d)e^{\beta_0}}{(1+e^{\beta_0})^2} &
  -\frac{(a+b)e^{\beta_0+\beta_1}}{(1+e^{\beta_0+\beta_1})^2} \\
  -\frac{(a+b)e^{\beta_0+\beta_1}}{(1+e^{\beta_0+\beta_1})^2} & -\frac{(a+b)e^{\beta_0+\beta_1}}{(1+e^{\beta_0+\beta_1})^2}
  \end{pmatrix}
  \end{equation}
  \begin{equation}
  I(\hat{\theta}) = -\frac{\partial^2\log L(\theta)}{\partial\theta\partial\theta^T} |_{\hat{\theta}} =

  \begin{pmatrix}
  \frac{ab}{a+b}+\frac{cd}{c+d} & \frac{ab}{a+b} \\
  \frac{ab}{a+b} & \frac{ab}{a+b}
  \end{pmatrix}
  \end{equation}
*** Variance of MLE
- By general theory of MLE,
  \begin{equation}
  \text{Cov}(\hat{\theta}) = I(\hat{\theta})^{-1} =
  \begin{pmatrix}
  \frac{1}{c} + \frac{1}{d} & -(\frac{1}{c} + \frac{1}{d}) \\
  -(\frac{1}{c} + \frac{1}{d}) & 1/a + 1/b + 1/c + 1/d
  \end{pmatrix}
  \end{equation}
- Use the fact of the inverse 2\times 2 matrix:
  \begin{equation}
  \begin{pmatrix}
  \alpha & \gamma \\
  \beta & \delta
  \end{pmatrix} ^{-1}
  = \frac{1}{\alpha\delta - \beta\gamma}
  \begin{pmatrix}
  \delta & -\gamma \\
  -\beta & \alpha
  \end{pmatrix}
  \end{equation}
*** Are X and Y associated?

|     | Y=1 | Y=0 | Sum |
|-----+-----+-----+-----|
| X=1 | a   | b   | a+b |
| X=0 | c   | d   | c+d |

- Thus $\beta_1 = \log \frac{ad}{bc}$ , $\hat{\text{Var}}(\hat{\beta_1}) = 1/a+1/b+1/c+1/d$
- A 95% approximate CI for $\beta_1$ is
  $$
  \log \frac{ad}{bc} \pm 1.96 \sqrt{1/a+1/b+1/c+1/d}
  $$
**** MLEs
- MLE of $\beta_0 = \ln(\frac{c}{d})$
- MLE of $\beta_1 = \ln(\frac{ad}{bc})$
* Week 5: Linear Classification Cont'd (Module 3)
Logistic Regression II
** Example: CHD
Example dataset: Coronary Heart Disease (CHD)
- Response: 0 or 1 (Disease)
- Independent: X (Age)
- Observations: 100, 43 = 1, 57 = 0
Question: Is age associated with CHD? Can predict CHD from age?
**** Logistic regression model
#+BEGIN_SRC r
glm1 <- glm(CHD ~ Age, family=binomial(link="logit"),
data=data0)
#+END_SRC

Coefficients:
- Intercept: -5.31
- Age: 0.11
**** Log reg equation

Hence, equation is

$$
\log \frac{P(Y=1)}{1-P(Y=1)} = -5.31 + 0.11 \text{Age} \\
\text{logit}(\pi_i) = -5.31 + 0.11 \text{Age}_i
$$

#+BEGIN_SRC <language> <switches> <header arguments>
plot(Age, CHD)
lines(Age, fitted.values(glm1), col="red")
#+END_SRC

The above produces a sigmoid curve:
[[./img/sigmoid1.png]]
*** CI of coefficients in Log Reg
How to find the $1-\alpha$ CI on $\beta_0, \beta_1$ in R?
#+BEGIN_SRC
confint(glm1, level=0.95)
#+END_SRC

produces 2.5% and 97.5% values of Intercept and Age coefficients.
*** Simplest logistic regression model
Define a new variable $\text{Flag} = I(Age\ge 50)$
- Objective: will I(Age\ge 50) be risk factor of CHD?
- Model: $\log\frac{\pi_i}{1-\pi_i} = \beta_0 + \beta_1 \text{Flag}_i$
- Statistical question: hypothesis test:
  1. $H_0: \beta_1 = 0$
  2. $H_1: \beta_1 \ne 0$
*** Analysis in R
#+BEGIN_SRC
flag <- I(Age>=50)
glm2 <- glm(CHD ~ flag, family = binomial(link="logit"), data=data0)
#+END_SRC
Coefficients:
- Intercept: -1.04
- flagTRUE: 2.10

Std error:
- Intercept: 0.28
- flagTRUE: 0.48

hence:
$$
\log\frac{P(Y=1)}{1-P(Y=1)} = -1.04 + 2.10 I(\text{Age}\ge 50)
$$
*** Analysis by hand

|                | CHD+ Y=1 | CHD- Y=0 | Sum |
| Age \ge 50 X=1 | a=26     | b=9      |  35 |
| Age \lt 50 X=0 | c=17     | d=48     |  65 |
|                | 43       | 57       | 100 |

When fitting $\log \frac{\pi_i}{1-\pi_i} = \beta_0 + \beta_1 \text{Flag}_i$ we have:

- $\hat{\beta_0}$ :: $\log c/d = ln (17/48) = -1.04$
- $\hat{\beta_1}$ :: $\log ad/bc = ln(26*48)/(9*17) = 2.10$
- std error $\hat{\beta_0}$ :: $\sqrt{1/17 + 1/48}=0.28$
- std error $\hat{\beta_1}$ :: $\sqrt{1/26 + 1/9 + 1/17 + 1/48} = 0.48$
*** Testing hypothesis
Statistical question: hypothesis test:
1. $H_0: \beta_1 = 0$
2. $H_1: \beta_1 \ne 0$


- Testing statistic is given by:
   $$
   Z_\text{obs} = \frac{\hat{\beta_1}-0}{se(\hat{\beta_1})} = \frac{2.09-0}{0.48} = 4.39
   $$
- p-value is:
   $$
   P(|Z| > |Z_\text{obs}|) \\
   = 2P(N(0,1) > 4.38) = 1.17e-05
   $$
- in R:
  ~2*(1-pnorm(4.38))~
- We conclude that Age \ge 50 is a risk factor of CHD
** Prediction in Logistic Regression
*** Logistic regression model
- Data: $(Y_i, x_{i1}, ..., x_{i, p-1}),  i = 1, ..., n; Y_i \in \{0,1\}$
- Model:
  $$
  P(Y_i = 1) = \pi_i; P(Y_i=0) = 1-\pi_i \\
  \log \frac{\pi_i}{1-\pi_i} = \beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + ... + \beta_{p-1} x_{i, p-1}
  $$
- Computing MLE and its asymptotic $p \times p$ covariance matrix
  $$
  \hat{\beta} = (\hat{\beta_0}, ..., \hat{\beta_{p-1}}) \\
  \hat{V} = \text{Var}(\hat{\beta})
  $$
- Question: how to predict future response for new variable **X**?
  $$
  x_{\text{new}} = (1, x_1, x_2, ..., x_{p-1})^T
  $$
*** Point estimation
When $x_{\text{new}} = (1, x_1, x_2, ..., x_{p-1})^T$, for the MLE $\hat{\beta} = (\hat{\beta_0}, ..., \hat{\beta_{p-1}}) \\$,
- the point estimate is $\hat{\beta}^T x$
- since $\log \frac{\pi}{1-\pi} = \hat{\beta}^T x$, the point estimate of the probability $P(Y=1|x) = \pi(x)$ is
  $$
  \hat{\pi}(x) = \frac{\exp(\hat{\beta}^T x)}{1+\exp(\hat{\beta}^T x)}
  $$
*** Point estimation in R
Given logistic regression object "glm.model", 2 kinds of R commands to get **different** point estimates:
- ~predict(glm.model, newdata)~ :: provides the value $\hat{\beta}^T x$
- ~predict(glm.model, newdata, type=response)~ :: provides the estimated probability $\hat{\pi}(x) = \frac{\exp(\hat{\beta}^T x)}{1+\exp(\hat{\beta}^T x)}$
*** Confidence interval for logistic regression
How to find CI for $\pi(x) = P(Y=1|x)?$

Steps:
1. Find a CI for $\beta^T x$.
   $$
   \text{Var}(\hat{\beta}^T x) = x^T \hat{V} x \\
   Z = \frac{\hat{\beta}^T x - \beta^T x}{\sqrt{x^T \hat{V} x}} \sim N(0,1)
   $$
   With 95% CI, -1.96 \le Z \le 1.96, hence:
   $$
   L = \hat{\beta}^T x - 1.96\sqrt{x^T \hat{V} x} \le \beta^T x \le \hat{\beta}^T x + 1.96\sqrt{x^T \hat{V}x} = U
   $$
2. Transform CI of $\beta^T x$ to $\pi(x)$ by using $\log \frac{\pi(x)}{1-\pi(x)} = \beta^T x$

   With 95% CI,
   $$
   L \le \beta^T x = \log \frac{\pi(x)}{1-\pi(x)} \le U
   $$

   Solve $\pi(x)$ to yield:

   $$
   \frac{e^L}{1+e^L} \le \pi(x) \le \frac{e^U}{1+e^U}
   $$

   which is the desired 95% CI for the true probability $\pi(x) = P(Y=1|x)$
*** Prediction
When $x_\text{new}=(1, x_1, ..., x_{p-1})^T=$ after computing the estimated probability
$$
\hat{\pi}(x) = P(Y=1|X) = \frac{\exp(\hat{\beta}^T x)}{1+\exp(\hat{\beta}^T x)}
$$
and its confidence interval, need to ask how to predict future response Y=1, Y=0
- Intuitively, predict $\hat{Y}=1$ if $\hat{\pi}(x) \ge 0.5$ and $\hat{Y}=0$ if $\hat{\pi}(x) \lt 0.5$
  - Might be reasonable in some applications with balanced training data, but not for others, e.g. when predict rare events or diseases
*** Prediction rule
- General prediction rule is to predict:
  $$
  \hat{Y} = 1 \text{ if } \hat{\pi} \ge c* \\
  \hat{Y} = 0 \text{ if } \hat{\pi} \lt c*
  $$
- Question: how to choose the threshold $c*$?
*** Choice of cutoff value $c*$
Possible approaches:
- $c* = 0.5$
- $c* = \% \text{ of Y=0 in training data}$
- Choose based on validation data or cross-validation
*** Choice of $c*$ from validation
If there's new validation data:
- $c*$ == optimal value that minimizes classification rate $P(\hat{Y} \ne Y)$, widely used in machine learning
- $c*$ == optimal value that minimizes
  $$
  w_0 P(\hat{Y} \ne Y|Y=0) + w_1 P(\hat{Y} \ne Y | Y = 1)
  $$
  More useful in biostatistics when effect of misclassifying false positives is more severe
- Both can be combined with cross-validation.
** Model Selection in Logistic Regression
*** Logistic Regression review
- Data: $(Y_i, x_{i1}, ..., x_{i, p-1}),  i = 1, ..., n; Y_i \in \{0,1\}$
- Model:
  $$
  P(Y_i = 1) = \pi_i; P(Y_i=0) = 1-\pi_i \\
  \log \frac{\pi_i}{1-\pi_i} = \beta_0 + \beta_1 x_{i1} + \beta_2 x_{i2} + ... + \beta_{p-1} x_{i, p-1}
  $$
- Question: will all $X$ variables be useful in predicting outcome $Y$?
  - **Model selection & variable selection**
*** Model selection in Logistic Regression
- Approaches:
  - Information criteria, e.g. AIC, BIC+ greedy search
  - Hypothesis testing, to test a specific hypothesis given a subset of coefficients are 0
*** Information criterion
- Definition of IC of a model with $k \beta$ as:
  - AIC :: $-2 \times \log(\text{likelihood}) + 2k$
  - BIC :: $-2 \times \log(\text{likelihood}) + \log(n) k$
- Among all possible $2^{p-1}$ models find a model that *minimizes* information criteria e.g. AIC
- In R, use: ~step()~
*** Hypothesis testing
When testing $H_0$ given some $\beta_j$ 's, say $k$ of them are 0
- Log-likelihood (or deviance) test:
  1. Fit model 1: Reduced model that omits the $k$ independent variables
  2. Fit model 2: Full model that includes all variables
  3. Log-likelihood statistic is
     $$
     LR_\text{obs} = -2 \log(\hat{L_\text{reduced}})- (-2\log(\hat{L}_\text{full}))
     $$
  4. p-value is $P(\chi^2_k \ge LR_\text{obs})$ where $\chi_k^2$ has df = $k$.
  5. Accept $H_0$ if p-value is large, e.g. \ge 5%.
*** Wald's test
Besides the above, other methods such as Wald's test also exist.
- Wald statistic is:
  $$
  w_\text{obs} = \hat{\beta}^T_k \hat{V}_k^{-1} \hat{\beta}_k
  $$
  where $\hat{V} k$ is the covariance matrix of the $k \beta_j$ 's
- p-value is thus
  $$
  P(\chi^2_k \ge W_\text{obs})
  $$
- Accept $H_0$ if p-value is large, e.g. \ge 5%.
*** Comparison of 2 models
- Data: $(Y_i, x_{i1}, ..., x_{i, p-1}),  i = 1, ..., n; Y_i \in \{0,1\}$
- Suppose we fit 2 logistic regression models with different $X$ variables
  1. Model 1:
     $$
     \log \frac{P(Y_i=1)}{1-P(Y_i=1)} = \beta_0 + \beta_1 x_{i1} + \beta_2 x_{i5} + ... + \beta_m x_{i,m}
     $$
  2. Model 2:
     $$
     \log \frac{P(Y_i=1)}{1-P(Y_i=1)} = \beta_0' + \beta_1' x_{i2} + \beta_2' x_{i3} + ... + \beta_k' x_{i,k}
     $$
- Question: how to compare these 2 models on validation/training data? Since model performance will depend on the choice of cutoff value $c*$ for $\pi(x)$
*** Assess performance
How to evaluate performance of logistic regression model without worrying about choice of cutoff value $c*$ ?
- Let $c*$ vary from 0 to 1 and consider its performance against validation/training data:
  - Specificity: true negative rate :: 1 - P(Type I error)
  - Sensitivity: true positive rate :: 1 - P(Type II error)
*** Specificity vs Sensitivity
For a given cutoff value $c*$, we compute:

|                    | Truth Y=0 | Truth Y=1 |
| Pred $\hat{Y}_i=0$ | a         | b         |
| Pred $\hat{Y}_i=1$ | c         | d         |

- Specificity :: $\frac{a}{a+b}$
- 1-Specificity :: $\frac{b}{a+b}$
- Sensitivity :: $\frac{d}{c+d}$

#+BEGIN_QUOTE
where 285 of these testing observations are from class 0 and the remaining 344 testing observations are from class 1.
#+END_QUOTE

means:
- 285 are predicted class 0
- 344 are predicted class 1

*** ROC curve
- Receiver operating characteristic curve :: curve of a given classification model or algorithm when cutoff value varies from 0 to 1
- X-axis :: 1-Specificity (False Positive Rate)
- Y-axis :: Sensitivity (True positive rate)

[[./img/auc-roc.png]]

Model with **larger** Area Under Curve of ROC is better!

** Case Study: Golf Putting I
- 5.2.1
- Gelman and Nolan, 07
- Putting: less than 60% successful on 5-ft putts.

*** Dataset
1. Distance
2. Tried
3. Success
4. % Made

*** Scatter plot
- Rate (100 \times Made) vs distance

*** Question
Based on training data, what's the predicted success rate from given distance $x$?

*** Multiple linear regression models
- Linear regression model:
  $$
  \text{Rate } = \beta_0 + \beta_1 \text{Distance} + \epsilon
  $$

- Quadratic regression model:
  $$
  \text{Rate } = \beta_0 + \beta_1 \text{Distance} + \beta_2 (\text{Distance})^2 + \epsilon
  $$

*** R code
- Linear regression
  ~lm1 <- lm(Rate ~ Distance)~
- Quadratic regression
  ~lm2 <- lm(Rate ~ Distance + l(Distance^2))~
- Plotting
  ~plot(Distance, Rate)~
  ~abline(lm1)~
  ~lines(Distance, fitted(lm2), col="red")~

*** Larger distance?
- Fit is good for small distance
- But bad for large distance

*** Problems with regression models
- Linear regression:
  - 2 to 3 ft change is different from 19 to 20 ft
  - Probability $\notin(0, 1)$
- Quadratic regression:
  - Might have larger R^2, yet an increasing probability at larger distance is not likely
  - Probability $\notin(0,1)$

** Case Study: Golf Putting II
Previously: Linear regression and quadratic regression.
However, they yield undesired predictions.
How about logistic regression?
*** Logistic regression model
- Data: $(\text{Success } Y_i, \text{Tried } n_i, \text{Distance } x_i = i \text{ for } i=2, 3, ..., 20)$
- Logistic regression model:
  $$
  Y_i \sim \text{Binomial}(n_i, \pi_i) \\
  P(Y_i = y) = {n_i \choose y} (\pi_i)^y (1- \pi_i)^{n_i - y} \\
  \log \frac{\pi}{1-\pi_i} = \beta_0 + \beta_1 x_1
  $$
*** R code
#+BEGIN_SRC
Rate = 100 * Success / Tried
# first way
glm1 <- glm(cbind(Success, Tried-Success)~ Distance, family=binomial)
summary(glm1)

# second way
glm1b <- glm(Success/Tried ~ Distance, weights=Tried, family=binomial)
summary(glm1b)
#+END_SRC
Coefficients:
- Intercept = 2.23
- Distance = -0.26
*** Fitted model:
$$
\log \frac{P(\text{success})}{1-P(\text{success})}
= 2.23 - 0.26 \times \text{Distance}
$$
[[./img/lr.png]]

#+BEGIN_SRC
pred3 <- 100 * predict(glm1, xnew, type="response")
#+END_SRC
*** Advantages and disadvantages of logistic regression
- Advantage:
  - Fitted probability $\in(0,1)$
  - Fitted probability \rightarrow 0 as distance \rightarrow \infty
- Disadvantage
  - As distance \rightarrow 0, fitted success probability \rightarrow $\frac{e^{\hat{\beta_0}}}{1+e^{\hat{\beta_0}}} = 0.903$ , seems low
** Case Study: Golf Putting III
Domain knowledge-based regression model.
In logistic regression model, $\pi(x) = \frac{e^{\hat{\beta_0}}}{1+e^{\hat{\beta_0}}}$.
- What's the scientific reason for this form of $\pi(x)$
- Any more meaningful form of $\pi(x)$? -> Domain knowledge!
*** New model
[[./img/putting.png]]
Let:
- \theta = hitting angle
- Ball enters only if $|\theta| \le \theta_0$
- $\theta_0 = \arcsin [(R-r)/x]$
- Model hitting angle $\theta \sim N(0, \sigma^2)$
- Probability of successful put is:
  $$
  \pi(x) = P(-\theta_0 \le \theta \le \theta_0) \\
  = P(-\frac{\theta_0}{\sigma} \le Z \le \frac{\theta_0}{\sigma}) \\
  = 2\Phi (\frac{1}{\sigma}\theta_0)-1
  $$
- Threshold angle as given above, thus, substituting,
  $$
  P(\text{success}) = \pi(x)
  = 2\Phi(\frac{1}{\sigma} \frac{4.25-1.68}{24x}) -1
  $$
  - where \sigma is tuning parameter
  - How to estimate \sigma?
*** Parameter estimation
- Use Method of Least Squares: find the \sigma that minimizes residual sum of squares
  $$
  RSS = \sum^N_{i=1}(\text{Rate}_i - [2\Phi(\frac{1}{\sigma}\arcsin \frac{4.25-1.68}{24x} -1 )])^2
  $$
- This is nonlinear least squares in statistics.
- Finding optimal \sigma in R:
  #+BEGIN_SRC
  nls1 <- nls(Rate ~ 100 *(2*pnorma((1/sigma0)*asin((4.25-1.68)/(24*Distance)/)*))-1, start=list(sigma0=5))
  pred4 <- predict(nls1, xnew)
  #+END_SRC
*** Fitted model
- By NLS, $\hat{\sigma} = 0.025$ i.e. 1.5 degress, thus new fitted model is
  $$
  P(\text{success}) = \pi(x)
  = 2\Phi(\frac{1}{0.025}\arcsin \frac{4.25-1.68}{24x}) -1
  $$
*** Concerns
- Model only accounts for angle at which ball is hit
- Does not account for short puts, balls that cover the hole and go in
- Does not account for terrain, playing conditions, ability
- Need more complex model?
